// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RaceStatus {
  waiting
  closed
  completed
}

enum RaceType {
  public
  private
  solo
}

// basic data like name, email, avatar are in clerk, here is the stats for this user
model User {
  id          String          @id @default(uuid())
  imageUrl    String?
  username    String          @unique
  Race        Race?           @relation(fields: [raceId], references: [id], onDelete: SetNull)
  raceId      String?
  raceHistory CompletedRace[]
  stats       Stats           @relation(fields: [statsId], references: [id])
  statsId     String
}

model Stats {
  id                String @id @default(uuid())
  avgWpmLast10Races Int    @default(0)
  avgWpmAllTime     Int    @default(0)
  lastRaceWpm       Int    @default(0)
  bestRaceWpm       Int    @default(0)
  User              User[]
}

model Race {
  id        String     @id @default(uuid())
  users     User[]
  avgWpm    Int
  authorId  String?
  updatedAt DateTime   @default(now())
  type      RaceType   @default(public)
  status    RaceStatus @default(waiting)
  startedAt DateTime?
  createdAt DateTime   @default(now())
  text      String
}

model RaceText {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String
}

model CompletedRace {
  id        String   @id @default(uuid())
  wpm       Int
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
