// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

enum race_status {
  waiting
  closed
  completed
}

enum race_type {
  public
  private
  solo
}

// basic data like name, email, avatar are in clerk, here is the stats for this user
model user {
  id           String           @id @default(uuid())
  image_url    String
  username     String?          @unique
  race         race?            @relation(fields: [race_id], references: [id], onDelete: SetNull)
  race_id      String?
  race_history completed_race[]
  stats        stats?
}

model stats {
  id                    String @id @default(uuid())
  avg_wpm_last_10_races Int    @default(0)
  avg_wpm_all_time      Int    @default(0)
  last_race_wpm         Int    @default(0)
  best_race_wpm         Int    @default(0)
  user_id               String @unique
  user                  user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model race {
  id         String      @id @default(uuid())
  users      user[]
  avg_wpm    Int
  author_id  String?
  updated_at DateTime    @default(now())
  type       race_type   @default(public)
  status     race_status @default(waiting)
  started_at DateTime?
  created_at DateTime    @default(now())
  text       String
}

model race_text {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  text       String
}

model completed_race {
  id         String   @id @default(uuid())
  wpm        Int
  created_at DateTime @default(now())
  user       user?    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String?
}
